* Aquaris - [WIP] My NixOS module library
Use Aquaris to easily manage related machines, their users and secrets!

Check out the [[file:example/][example]] configuration to see how this looks in practice.

Or create a blank configuration from the template by running:
#+begin_src shell
  nix flake new -t github:42loco42/aquaris <name>
#+end_src

** Secrets management
Aquaris includes a powerful secrets management facility based on [[https://github.com/ryantm/agenix][agenix]],
with secrets belonging to one of three categories:
- toplevel: included by all NixOS configurations
- user: personal secrets like SSH keys or password hashes,
  readable only by their owner and machines they're on
- machine: secrets for machines like API keys or TLS certificates,
  readable only by the respective machine and its admin accounts

* Module reference
** [[file:agenix.nix][agenix]]
- Enables [[https://github.com/ryantm/agenix][agenix]], a Nix secrets management tool
- Automatically imports all secrets readable by the current machine

** [[file:basic.nix][basic]]
- Configures a lot of basic system options, including sane defaults for Nix
- Creates the user accounts
*** Options (=aquaris.machine=)
- =secretKey=: Location of the SSH secret key;
  should be changed when using an ephemeral root storage
  (default: =/etc/ssh/ssh_host_ed25519_key=)
- =keyMap=: Key map of the system consoles (default =de-latin1=)
- =locale=: System locale (default =en_US.UTF-8=)
- =timeLocale=: Locale to display the time in (LC_TIME) (default =de_DE.UTF-8=)
- =timeZone=: Time zone of the system (default =Europe/Berlin=)

** [[file:disko.nix][disko]]
- Defines filesystems declaratively via [[https://github.com/nix-community/disko][disko]]
- By default, this modules generates ephemeral root storage (=tmpfs=)
  and a ZFS pool with the following datasets under =nixos=:
  - =nix=: Storage for the =/nix= directory
  - =persist=: Persistent storage
  - for each user: =home/<name>=

** [[file:lanza.nix][lanza]]
- Enables [[https://github.com/nix-community/lanzaboote/][lanzaboote]], a Secure Boot-capable boot loader
- Automatically creates Secure Boot key with [[https://github.com/Foxboron/sbctl][sbctl]]
- Lanzaboote is fetched from [[https://42loco42.cachix.org][my binary cache]], so no lengthy Rust compilation process!

** [[file:persist.nix][persist]]
- Tools for working with persistent files on a system with ephemeral root storage
- Inspired by [[https://github.com/nix-community/impermanence][impermanence]], but much simpler
- Designed to be used only with directories
- All system dirs are bind-mounted, all user dirs are symlinked
*** Options (=aquaris.persist=)
- =system=: List of persistent system paths.
  Default entries: =/etc/secureboot=, =/var/db/sudo=, =/var/log=
- =users.<name>=:
  For each user in the set: list of its persistent paths.

* [TODO] Not yet pulled from Incubator
A lot of useful stuff is still stuck deep within [[https://github.com/42LoCo42/.dotfiles][my dotfiles]], particularly [[https://github.com/42LoCo42/.dotfiles/tree/nixos/machines/test][the test VM]].
All of that code needs to be cleaned up and prepared for independent usage.
I especially want to make all my research into split security domain ZFS systems
available as easy-to-use NixOS modules, since there are quite some challenges involved.
This includes:
- automatic [[https://github.com/nix-community/disko][disko]] config creation
- automatic system dataset key management ([[https://github.com/42LoCo42/.dotfiles/blob/nixos/machines/test/zfs-autokey.nix][zfs-autokey]])
- reliable unlocking of user datasets at login ([[https://github.com/42LoCo42/.dotfiles/blob/nixos/zfs-pam][zfs-pam]])
